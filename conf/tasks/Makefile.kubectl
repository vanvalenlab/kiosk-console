## Provision RBAC cluster role binding
kubectl/create/rbac:
	@echo " "
	@echo "Finalizing Kubernetes RBAC roles and bindings."
	@kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:default 2> /dev/null || \
		echo "Kubernetes RBAC binding is already under control. No changes made."
	@echo "Kubernetes RBAC roles creation and binding finished."
	@echo " "
	@echo " "

## Provision cluster autoscaler
kubectl/create/autoscaler:
	gomplate -f addons/cluster-autoscaler.yaml | kubectl apply -f -

## Provision cluster autoscaler
kubectl/create/nvidia-drivers:
	gomplate -f addons/nvidia-device-plugin.yaml | kubectl apply -f -

## Provision all extra resources with kubectl
kubectl/create/all: \
  kubectl/create/rbac \
  kubectl/create/autoscaler \
  kubectl/create/nvidia-drivers
	@echo "Kubectl provisioned"

## Display the cluster IP or URL
kubectl/display/ip: IP_VAR=$(shell sh -c "kubectl get svc --namespace=kube-system ingress-ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}'")
kubectl/display/ip:
	@echo " "
	@echo Cluster address: ${IP_VAR}
	@echo " "
	@echo " "
	@echo export CLUSTER_ADDRESS=${IP_VAR} > ./cluster_address

## Destroy persistent volume claims
kubectl/destroy/pvc:
	@echo " "
	@echo "Destroying all Persistent Volume Claims."
	@kubectl delete pvc --all -A
	@echo " "

## Tear down kube-prometheus-stack and it's CRDs
kubectl/destroy/prometheus/stack:
	@echo "Deleting kube-prometheus-stack..."
	-@helm delete kube-prometheus-stack
	-@kubectl delete crd prometheuses.monitoring.coreos.com
	-@kubectl delete crd prometheusrules.monitoring.coreos.com
	-@kubectl delete crd servicemonitors.monitoring.coreos.com
	-@kubectl delete crd alertmanagers.monitoring.coreos.com
	-@kubectl delete crd alertmanagerconfigs.monitoring.coreos.com
	-@kubectl delete crd podmonitors.monitoring.coreos.com
	-@kubectl delete crd probes.monitoring.coreos.com
	-@kubectl delete crd thanosrulers.monitoring.coreos.com
